{"version":3,"file":"SeekableStream.js","sourceRoot":"","sources":["SeekableStream.ts"],"names":["SeekableStream","SeekableStream.constructor","SeekableStream.getReader","SeekableStream.requestClose","SeekableStream.seek","SeekableStream.strategy"],"mappings":";;;;;;;;;;;;;IACA,wBAAoB,YAAY,CAAC,CAAA;IACjC,+BAAuC,kBAAkB,CAAC,CAAA;IAE1D,qCAAiC,wBAAwB,CAAC,CAAA;IAE1D;QAA+CA,kCAAiBA;QAI/DA;;;;;WAKGA;QACHA,wBAAYA,gBAA2BA,EAAEA,QAA0BA,EAAEA,YAA4BA;YAAxDC,wBAA0BA,GAA1BA,aAA0BA;YAAEA,4BAA4BA,GAA5BA,mBAA4BA;YAChGA,kBAAMA,gBAAgBA,EAAEA,QAAQA,CAACA,CAACA;YAElCA,IAAIA,CAACA,YAAYA,GAAGA,YAAYA,CAACA;QAClCA,CAACA;QAEDD,kCAASA,GAATA;YACCE,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,QAAQA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA;gBAClCA,MAAMA,IAAIA,SAASA,CAACA,mCAAmCA,CAACA,CAACA;YAC1DA,CAACA;YAEDA,MAAMA,CAACA,IAAIA,8BAAoBA,CAACA,IAAIA,CAACA,CAACA;QACvCA,CAACA;QAEDF,qCAAYA,GAAZA;YACCG,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA,CAACA;gBACxBA,gBAAKA,CAACA,YAAYA,WAAEA,CAACA;YACtBA,CAACA;QACFA,CAACA;QAEDH,6BAAIA,GAAJA,UAAKA,QAAgBA;YAArBI,iBAuBCA;YAtBAA,EAAEA,CAACA,CAACA,IAAIA,CAACA,iBAAiBA,CAACA,IAAIA,CAACA,CAACA,CAACA;gBACjCA,MAAMA,CAACA,IAAIA,CAACA,iBAAiBA,CAACA,IAAIA,CAACA,IAAIA,CAACA,UAAUA,EAAEA,QAAQA,CAACA,CAACA;YAC/DA,CAACA;YACDA,IAAIA,CAACA,CAACA;gBACLA,EAAEA,CAACA,CAACA,IAAIA,CAACA,MAAMA,IAAIA,QAAQA,GAAGA,IAAIA,CAACA,MAAMA,CAACA,eAAeA,CAACA,CAACA,CAACA;oBAC3DA,MAAMA,CAACA,iBAAOA,CAACA,MAAMA,CAACA,IAAIA,KAAKA,CAACA,sDAAsDA,CAACA,CAACA,CAACA;gBAC1FA,CAACA;gBACDA,IAAIA,CAACA,CAACA;oBACLA,IAAIA,WAAWA,GAAGA;wBACjBA,MAAMA,CAACA,KAAIA,CAACA,MAAMA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,CAACA,UAACA,MAAqBA;4BACpDA,EAAEA,CAACA,CAACA,MAAMA,CAACA,IAAIA,IAAIA,KAAIA,CAACA,MAAMA,CAACA,eAAeA,KAAKA,QAAQA,CAACA,CAACA,CAACA;gCAC7DA,MAAMA,CAACA,iBAAOA,CAACA,OAAOA,CAACA,KAAIA,CAACA,MAAMA,CAACA,eAAeA,CAACA,CAACA;4BACrDA,CAACA;4BACDA,IAAIA,CAACA,CAACA;gCACLA,MAAMA,CAACA,WAAWA,EAAEA,CAACA;4BACtBA,CAACA;wBACFA,CAACA,CAACA,CAACA;oBACJA,CAACA,CAACA;oBAEFA,MAAMA,CAACA,WAAWA,EAAEA,CAACA;gBACtBA,CAACA;YACFA,CAACA;QACFA,CAACA;QAEDJ,sBAAIA,oCAAQA;iBAAZA;gBACCK,MAAMA,CAACA,IAAIA,CAACA,SAASA,CAACA;YACvBA,CAACA;;;WAAAL;QACFA,qBAACA;IAADA,CAACA,AA1DD,EAA+C,wBAAc,EA0D5D;IA1DD;oCA0DC,CAAA","sourcesContent":["import { Strategy } from './interfaces';\nimport Promise from '../Promise';\nimport ReadableStream, { Source } from './ReadableStream';\nimport { ReadResult } from './ReadableStreamReader';\nimport SeekableStreamReader from './SeekableStreamReader';\n\nexport default class SeekableStream<T> extends ReadableStream<T> {\n\tpreventClose: boolean;\n\treader: SeekableStreamReader<T>;\n\n\t/**\n\t * @param preventClose (default=true) Prevent the stream from closing when it reaches the end.\n\t * If true, the stream will not close when requestClose is called on the controller (which is typically done by the\n\t * source when it reaches its end). This allows for re-seeking in a stream that has already been read to the end.\n\t * The stream can be closed by calling ReadableStream#close.\n\t */\n\tconstructor(underlyingSource: Source<T>, strategy: Strategy<T> = {}, preventClose: boolean = true) {\n\t\tsuper(underlyingSource, strategy);\n\n\t\tthis.preventClose = preventClose;\n\t}\n\n\tgetReader(): SeekableStreamReader<T> {\n\t\tif (!this.readable || !this.seek) {\n\t\t\tthrow new TypeError('Must be a SeekableStream instance');\n\t\t}\n\n\t\treturn new SeekableStreamReader(this);\n\t}\n\n\trequestClose(): void {\n\t\tif (!this.preventClose) {\n\t\t\tsuper.requestClose();\n\t\t}\n\t}\n\n\tseek(position: number): Promise<number> {\n\t\tif (this._underlyingSource.seek) {\n\t\t\treturn this._underlyingSource.seek(this.controller, position);\n\t\t}\n\t\telse {\n\t\t\tif (this.reader && position < this.reader.currentPosition) {\n\t\t\t\treturn Promise.reject(new Error('Stream source is not seekable; cannot seek backwards'));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet discardNext = (): Promise<number> => {\n\t\t\t\t\treturn this.reader.read().then((result: ReadResult<T>) => {\n\t\t\t\t\t\tif (result.done || this.reader.currentPosition === position) {\n\t\t\t\t\t\t\treturn Promise.resolve(this.reader.currentPosition);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\treturn discardNext();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\treturn discardNext();\n\t\t\t}\n\t\t}\n\t}\n\n\tget strategy() {\n\t\treturn this._strategy;\n\t}\n}\n"]}