{"version":3,"file":"EventedStreamSource.js","sourceRoot":"","sources":["EventedStreamSource.ts"],"names":["EventedStreamSource","EventedStreamSource.constructor","EventedStreamSource.start","EventedStreamSource.cancel","EventedStreamSource._handleEvent"],"mappings":";;;;;;;;IAEA,mBAAiC,UAAU,CAAC,CAAA;IAC5C,wBAAoB,eAAe,CAAC,CAAA;IAOpC;QAMCA,6BAAYA,MAAwBA,EAAEA,IAAgBA;YACrDC,IAAIA,CAACA,OAAOA,GAAGA,MAAMA,CAACA;YAEtBA,EAAEA,CAACA,CAACA,KAAKA,CAACA,OAAOA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;gBACzBA,IAAIA,CAACA,OAAOA,GAASA,IAAIA,CAACA;YAC3BA,CAACA;YACDA,IAAIA,CAACA,CAACA;gBACLA,IAAIA,CAACA,OAAOA,GAAGA,CAAQA,IAAIA,CAAEA,CAACA;YAC/BA,CAACA;YAEDA,IAAIA,CAACA,QAAQA,GAAGA,EAAEA,CAACA;QACpBA,CAACA;QAEDD,mCAAKA,GAALA,UAAMA,UAA2CA;YAAjDE,iBAOCA;YANAA,IAAIA,CAACA,WAAWA,GAAGA,UAAUA,CAACA;YAC9BA,IAAIA,CAACA,OAAOA,CAACA,OAAOA,CAACA,UAACA,SAAiBA;gBACtCA,KAAIA,CAACA,QAAQA,CAACA,IAAIA,CAACA,YAAEA,CAAOA,KAAIA,CAACA,OAAOA,EAAEA,SAASA,EAAEA,KAAIA,CAACA,YAAYA,CAACA,IAAIA,CAACA,KAAIA,CAACA,CAACA,CAACA,CAACA;YACrFA,CAACA,CAACA,CAACA;YAEHA,MAAMA,CAACA,iBAAOA,CAACA,OAAOA,EAAEA,CAACA;QAC1BA,CAACA;QAEDF,oCAAMA,GAANA,UAAOA,MAAYA;YAClBG,OAAOA,IAAIA,CAACA,QAAQA,CAACA,MAAMA,EAAEA,CAACA;gBAC7BA,IAAIA,CAACA,QAAQA,CAACA,KAAKA,EAAEA,CAACA,OAAOA,EAAEA,CAACA;YACjCA,CAACA;YAEDA,MAAMA,CAACA,iBAAOA,CAACA,OAAOA,EAAEA,CAACA;QAC1BA,CAACA;QAESH,0CAAYA,GAAtBA,UAAuBA,KAAYA;YAClCI,IAAIA,CAACA,WAAWA,CAACA,OAAOA,CAACA,KAAKA,CAACA,CAACA;QACjCA,CAACA;QACFJ,0BAACA;IAADA,CAACA,AAvCD,IAuCC;IAvCD;yCAuCC,CAAA","sourcesContent":["import Evented from '../../Evented';\nimport { Handle } from '../../interfaces';\nimport on, { EventEmitter } from '../../on';\nimport Promise from '../../Promise';\nimport { Source } from '../ReadableStream';\nimport ReadableStreamController from '../ReadableStreamController';\n\nexport type EventTargetTypes = Evented | EventEmitter | EventTarget;\nexport type EventTypes = string | string[];\n\nexport default class EventedStreamSource implements Source<Event> {\n\tprotected _controller: ReadableStreamController<Event>;\n\tprotected _target: EventTargetTypes;\n\tprotected _events: string[];\n\tprotected _handles: Handle[];\n\n\tconstructor(target: EventTargetTypes, type: EventTypes) {\n\t\tthis._target = target;\n\n\t\tif (Array.isArray(type)) {\n\t\t\tthis._events = <any> type;\n\t\t}\n\t\telse {\n\t\t\tthis._events = [ <any> type ];\n\t\t}\n\n\t\tthis._handles = [];\n\t}\n\n\tstart(controller: ReadableStreamController<Event>): Promise<void> {\n\t\tthis._controller = controller;\n\t\tthis._events.forEach((eventName: string) => {\n\t\t\tthis._handles.push(on(<any> this._target, eventName, this._handleEvent.bind(this)));\n\t\t});\n\n\t\treturn Promise.resolve();\n\t}\n\n\tcancel(reason?: any): Promise<void> {\n\t\twhile (this._handles.length) {\n\t\t\tthis._handles.shift().destroy();\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n\n\tprotected _handleEvent(event: Event) {\n\t\tthis._controller.enqueue(event);\n\t}\n}\n"]}