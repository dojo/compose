{"version":3,"file":"ArraySink.js","sourceRoot":"","sources":["ArraySink.ts"],"names":["ArraySink","ArraySink.constructor","ArraySink.abort","ArraySink.close","ArraySink.start","ArraySink.write"],"mappings":";;;;;;;;IAAA,wBAAoB,YAAY,CAAC,CAAA;IAGjC,uDAAuD;IACvD,2DAA2D;IAC3D,IAAI,QAAQ,GAAG,iBAAO,CAAC,OAAO,EAAE,CAAC;IAEjC;;;;OAIG;IACH;QAAAA;QAuBAC,CAACA;QAnBAD,yBAAKA,GAALA,UAAMA,MAAWA;YAChBE,MAAMA,CAACA,QAAQA,CAACA;QACjBA,CAACA;QAEDF,yBAAKA,GAALA;YACCG,MAAMA,CAACA,iBAAOA,CAACA,OAAOA,EAAEA,CAACA;QAC1BA,CAACA;QAEDH,yBAAKA,GAALA,UAAMA,KAAiBA;YACtBI,IAAIA,CAACA,MAAMA,GAAGA,EAAEA,CAACA;YACjBA,MAAMA,CAACA,QAAQA,CAACA;QACjBA,CAACA;QAEDJ,yBAAKA,GAALA,UAAMA,KAAQA;YACbK,EAAEA,CAACA,CAACA,KAAKA,CAACA,CAACA,CAACA;gBACXA,IAAIA,CAACA,MAAMA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;YACzBA,CAACA;YACDA,MAAMA,CAACA,QAAQA,CAACA;QACjBA,CAACA;QACFL,gBAACA;IAADA,CAACA,AAvBD,IAuBC;IAvBD;+BAuBC,CAAA","sourcesContent":["import Promise from '../Promise';\nimport { Sink } from './WritableStream';\n\n// Since this Sink is doing no asynchronous operations,\n// use a single resolved promise for all returned promises.\nlet resolved = Promise.resolve();\n\n/**\n * A WritableStream sink that collects the chunks it receives and\n * stores them into an array.  Use the chunks property to retrieve\n * the collection of chunks.\n */\nexport default class ArraySink<T> implements Sink<T> {\n\n\tchunks: T[];\n\n\tabort(reason: any): Promise<void> {\n\t\treturn resolved;\n\t}\n\n\tclose(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tstart(error: () => void): Promise<void> {\n\t\tthis.chunks = [];\n\t\treturn resolved;\n\t}\n\n\twrite(chunk: T): Promise<void> {\n\t\tif (chunk) {\n\t\t\tthis.chunks.push(chunk);\n\t\t}\n\t\treturn resolved;\n\t}\n}\n"]}