{"version":3,"file":"WritableStream.js","sourceRoot":"","sources":["WritableStream.ts"],"names":["State","isWritableStream","WritableStream","WritableStream.constructor","WritableStream.closed","WritableStream.ready","WritableStream.state","WritableStream._advanceQueue","WritableStream._close","WritableStream._error","WritableStream._syncStateWithQueue","WritableStream.abort","WritableStream.close","WritableStream.write"],"mappings":"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","sourcesContent":["import { Strategy } from './interfaces';\nimport Promise from '../Promise';\nimport SizeQueue from './SizeQueue';\nimport * as util from './util';\n\n// A Record is used internally by the stream to process queued writes. It represents the chunk to be written plus\n// additional metadata used internally.\nexport interface Record<T> {\n\t// This flag indicates that this record is the end of the stream and the stream should close when processing it\n\tclose?: boolean;\n\tchunk?: T;\n\treject?: (error: Error) => void;\n\tresolve?: () => void;\n}\n\n/**\n * WritableStream's possible states\n */\nexport enum State { Closed, Closing, Errored, Waiting, Writable }\n\n// This function is basically a context check to protect against calling WritableStream methods with incorrect context\n// (as one might accidentally do when passing a method as callback)\nfunction isWritableStream(x: any): boolean {\n\treturn Object.prototype.hasOwnProperty.call(x, '_underlyingSink');\n}\n\n/**\n * The Sink interface defines the methods a module can implement to create a target sink for a `WritableStream`.\n *\n * The Stream API provides a consistent stream API while `ReadableStream.Source` and `WritableStream.Sink` implementors\n * provide the logic to connect a stream to specific data sources & sinks.\n */\nexport interface Sink<T> {\n\n\t/**\n\t * Indicates the stream is prematurely closing due to an error.  The sink should do any necessary cleanup\n\t * and release resources. When a stream calls `abort` it will discard any queued chunks. If the sink does not\n\t * provide an `abort` method then the stream will call `close` instead.\n\t *\n\t * @param reason The reason the stream is closing.\n\t */\n\tabort?(reason?: any): Promise<void>;\n\n\t/**\n\t * Indicates the stream is closing.  The sink should do any necessary cleanup and release resources. The stream\n\t * will not call this method until is has successfully written all queued chunks.\n\t */\n\tclose?(): Promise<void>;\n\n\t/**\n\t * Requests the sink to prepare for receiving chunks.\n\t *\n\t * @param error An error callback that can be used at any time by the sink to indicate an error has occurred.\n\t * @returns A promise that resolves when the sink's start operation has finished.  If the promise rejects,\n\t * \t\tthe stream will be errored.\n\t */\n\tstart?(error: (error: Error) => void): Promise<void>;\n\n\t/**\n\t * Requests the sink write a chunk.\n\t *\n\t * @param chunk The chunk to be written.\n\t * @returns A promise that resolves when the sink's write operation has finished.  If the promise rejects,\n\t * \t\tthe stream will be errored.\n\t */\n\twrite?(chunk: T): Promise<void>;\n}\n\n/**\n * This class provides a writable stream implementation. Data written to a stream will be passed on to the underlying\n * sink (`WritableStream.Sink`), an instance of which must be supplied to the stream upon instantation. This class\n * provides the standard stream API, while implementations of the `Sink` API allow the data to be written to\n * various persistence layers.\n */\nexport default class WritableStream<T> {\n\t/**\n\t * @returns A promise that is resolved when the stream is closed, or is rejected if the stream errors.\n\t */\n\tget closed(): Promise<void> {\n\t\treturn this._closedPromise;\n\t}\n\n\t/**\n\t * @returns A promise that is resolved when the stream transitions away from the 'waiting' state. The stream will\n\t * use this to indicate backpressure - an unresolved `ready` promise indicates that writes should not yet be\n\t * performed.\n\t */\n\tget ready(): Promise<void> {\n\t\treturn this._readyPromise;\n\t}\n\n\t/**\n\t * @returns The stream's current @State\n\t */\n\tget state(): State {\n\t\treturn this._state;\n\t}\n\n\tprotected _advancing: boolean;\n\tprotected _closedPromise: Promise<void>;\n\tprotected _readyPromise: Promise<void>;\n\tprotected _rejectClosedPromise: (error: Error) => void;\n\tprotected _rejectReadyPromise: (error: Error) => void;\n\tprotected _resolveClosedPromise: () => void;\n\tprotected _resolveReadyPromise: () => void;\n\tprotected _started: boolean;\n\tprotected _startedPromise: Promise<any>;\n\tprotected _state: State;\n\tprotected _storedError: Error;\n\tprotected _strategy: Strategy<T>;\n\tprotected _underlyingSink: Sink<T>;\n\tprotected _queue: SizeQueue<Record<T>>;\n\tprotected _writing: boolean;\n\n\tconstructor(underlyingSink: Sink<T> = {}, strategy: Strategy<T> = {}) {\n\t\tthis._underlyingSink = underlyingSink;\n\n\t\tthis._closedPromise = new Promise<void>((resolve, reject) => {\n\t\t\tthis._resolveClosedPromise = resolve;\n\t\t\tthis._rejectClosedPromise = reject;\n\t\t});\n\n\t\tthis._advancing = false;\n\t\tthis._readyPromise = Promise.resolve();\n\t\tthis._queue = new SizeQueue<Record<T>>();\n\t\tthis._state = State.Writable;\n\t\tthis._started = false;\n\t\tthis._writing = false;\n\t\tthis._strategy = util.normalizeStrategy(strategy);\n\t\tthis._syncStateWithQueue();\n\n\t\tthis._startedPromise = Promise.resolve(\n\t\t\tutil.invokeOrNoop(this._underlyingSink, 'start', [ this._error.bind(this) ])\n\t\t).then(() => {\n\t\t\tthis._started = true;\n\t\t\tthis._startedPromise = undefined;\n\t\t}, (error: Error) => {\n\t\t\tthis._error(error);\n\t\t});\n\t}\n\n\t// This method combines the logic of two methods:\n\t// 4.3.1 CallOrScheduleWritableStreamAdvanceQueue\n\t// 4.3.6 WritableStreamAdvanceQueue\n\tprotected _advanceQueue() {\n\t\tif (!this._started) {\n\t\t\tif (!this._advancing) {\n\t\t\t\tthis._advancing = true;\n\t\t\t\tthis._startedPromise.then(() => {\n\t\t\t\t\tthis._advanceQueue();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._queue || this._writing) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst writeRecord: Record<T> = this._queue.peek();\n\n\t\tif (writeRecord.close) {\n\t\t\t// TODO: SKIP? Assert 4.3.6-3.a\n\t\t\tif (this.state !== State.Closing) {\n\t\t\t\tthrow new Error('Invalid record');\n\t\t\t}\n\n\t\t\tthis._queue.dequeue();\n\t\t\t// TODO: SKIP? Assert 4.3.6-3.c\n\t\t\tthis._close();\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis._writing = true;\n\n\t\tutil.promiseInvokeOrNoop(this._underlyingSink, 'write', [ writeRecord.chunk ]).then(() => {\n\t\t\tif (this.state !== State.Errored) {\n\t\t\t\tthis._writing = false;\n\t\t\t\twriteRecord.resolve();\n\t\t\t\tthis._queue.dequeue();\n\n\t\t\t\ttry {\n\t\t\t\t\tthis._syncStateWithQueue();\n\t\t\t\t}\n\t\t\t\tcatch (error) {\n\t\t\t\t\treturn this._error(error);\n\t\t\t\t}\n\n\t\t\t\tthis._advanceQueue();\n\t\t\t}\n\t\t}, (error: Error) => {\n\t\t\tthis._error(error);\n\t\t});\n\t}\n\n\t// 4.3.2 CloseWritableStream\n\tprotected _close(): void {\n\t\tif (this.state !== State.Closing) {\n\t\t\t// 4.3.2-1\n\t\t\tthrow new Error('WritableStream#_close called while state is not \"Closing\"');\n\t\t}\n\n\t\tutil.promiseInvokeOrNoop(this._underlyingSink, 'close').then(() => {\n\t\t\tif (this.state !== State.Errored) {\n\t\t\t\t// TODO: Assert 4.3.2.2-a.ii\n\t\t\t\tthis._resolveClosedPromise();\n\t\t\t\tthis._state = State.Closed;\n\t\t\t\tthis._underlyingSink = undefined;\n\t\t\t}\n\t\t}, (error: Error) => {\n\t\t\tthis._error(error);\n\t\t});\n\t}\n\n\t// 4.3.3 ErrorWritableStream\n\tprotected _error(error: Error) {\n\t\tif (this.state === State.Closed || this.state === State.Errored) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet writeRecord: Record<T>;\n\n\t\twhile (this._queue.length) {\n\t\t\twriteRecord = this._queue.dequeue();\n\n\t\t\tif (!writeRecord.close) {\n\t\t\t\twriteRecord.reject(error);\n\t\t\t}\n\t\t}\n\n\t\tthis._storedError = error;\n\n\t\tif (this.state === State.Waiting) {\n\t\t\tthis._resolveReadyPromise();\n\t\t}\n\n\t\tthis._rejectClosedPromise(error);\n\t\tthis._state = State.Errored;\n\t}\n\n\t// 4.3.5 SyncWritableStreamStateWithQueue\n\tprotected _syncStateWithQueue(): void {\n\t\tif (this.state === State.Closing) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst queueSize = this._queue.totalSize;\n\t\tconst shouldApplyBackPressure = queueSize > this._strategy.highWaterMark;\n\n\t\tif (shouldApplyBackPressure && this.state === State.Writable) {\n\t\t\tthis._state = State.Waiting;\n\t\t\tthis._readyPromise = new Promise<void>((resolve, reject) => {\n\t\t\t\tthis._resolveReadyPromise = resolve;\n\t\t\t\tthis._rejectReadyPromise = reject;\n\t\t\t});\n\t\t}\n\n\t\tif (shouldApplyBackPressure === false && this.state === State.Waiting) {\n\t\t\tthis._state = State.Writable;\n\t\t\tthis._resolveReadyPromise();\n\t\t}\n\t}\n\n\t/**\n\t * Signals that the producer can no longer write to the stream and it should be immediately moved to an \"errored\"\n\t * state. Any un-written data that is queued will be discarded.\n\t */\n\tabort(reason: any): Promise<void> {\n\t\t// 4.2.4.4-1\n\t\tif (!isWritableStream(this)) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error('WritableStream method called in context of object that is not a WritableStream instance')\n\t\t\t);\n\t\t}\n\n\t\tif (this.state === State.Closed) {\n\t\t\t// 4.2.4.4-2\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tif (this.state === State.Errored) {\n\t\t\t// 4.2.4.4-3\n\t\t\treturn Promise.reject(this._storedError);\n\t\t}\n\n\t\tconst error: Error = reason instanceof Error ? reason : new Error(reason);\n\n\t\tthis._error(error);\n\n\t\treturn util.promiseInvokeOrFallbackOrNoop(this._underlyingSink, 'abort', [ reason ], 'close')\n\t\t\t.then(function () {\n\t\t\t\treturn;\n\t\t\t});\n\t}\n\n\t/**\n\t * Signals that the producer is done writing to the stream and wishes to move it to a \"closed\" state. The stream\n\t * may have un-writted data queued; until the data has been written the stream will remain in the \"closing\" state.\n\t */\n\tclose(): Promise<void> {\n\t\t// 4.2.4.5-1\n\t\tif (!isWritableStream(this)) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error('WritableStream method called in context of object that is not a WritableStream instance')\n\t\t\t);\n\t\t}\n\n\t\t// 4.2.4.5-2\n\t\tif (this.state === State.Closed) {\n\t\t\treturn Promise.reject(new TypeError('Stream is already closed'));\n\t\t}\n\n\t\tif (this.state === State.Closing) {\n\t\t\treturn Promise.reject(new TypeError('Stream is already closing'));\n\t\t}\n\n\t\tif (this.state === State.Errored) {\n\t\t\t// 4.2.4.5-3\n\t\t\treturn Promise.reject(this._storedError);\n\t\t}\n\n\t\tif (this.state === State.Waiting) {\n\t\t\t// 4.2.4.5-4\n\t\t\tthis._resolveReadyPromise();\n\t\t}\n\n\t\tthis._state = State.Closing;\n\t\tthis._queue.enqueue({ close: true }, 0);\n\t\tthis._advanceQueue();\n\n\t\treturn this._closedPromise;\n\t}\n\n\t/**\n\t * Enqueue a chunk of data to be written to the underlying sink. `write` can be called successively without waiting\n\t * for the previous write's promise to resolve. To respect the stream's backpressure indicator, check if the stream\n\t * has entered the \"waiting\" state between writes.\n\t *\n\t * @returns A promise that will be fulfilled when the chunk has been written to the underlying sink.\n\t */\n\twrite(chunk: T): Promise<void> {\n\t\t// 4.2.4.6-1\n\t\tif (!isWritableStream(this)) {\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error('WritableStream method called in context of object that is not a WritableStream instance')\n\t\t\t);\n\t\t}\n\n\t\t// 4.2.4.6-2\n\t\tif (this.state === State.Closed) {\n\t\t\treturn Promise.reject(new TypeError('Stream is closed'));\n\t\t}\n\n\t\tif (this.state === State.Closing) {\n\t\t\treturn Promise.reject(new TypeError('Stream is closing'));\n\t\t}\n\n\t\tif (this.state === State.Errored) {\n\t\t\t// 4.2.4.6-3\n\t\t\treturn Promise.reject(this._storedError);\n\t\t}\n\n\t\tlet chunkSize = 1;\n\t\tlet writeRecord: Record<T>;\n\t\tlet promise = new Promise<void>(function (resolve, reject) {\n\t\t\twriteRecord = {\n\t\t\t\tchunk: chunk,\n\t\t\t\treject: reject,\n\t\t\t\tresolve: resolve\n\t\t\t};\n\t\t});\n\n\t\t// 4.2.4.6-6.b\n\t\ttry {\n\t\t\tif (this._strategy && this._strategy.size) {\n\t\t\t\tchunkSize = this._strategy.size(chunk);\n\t\t\t}\n\n\t\t\tthis._queue.enqueue(writeRecord, chunkSize);\n\t\t\tthis._syncStateWithQueue();\n\t\t}\n\t\tcatch (error) {\n\t\t\t// 4.2.4.6-6.b, 4.2.4.6-10, 4.2.4.6-12\n\t\t\tthis._error(error);\n\t\t\treturn Promise.reject(error);\n\t\t}\n\n\t\tthis._advanceQueue();\n\n\t\treturn promise;\n\t}\n}\n"]}