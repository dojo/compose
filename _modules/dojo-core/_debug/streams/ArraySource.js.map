{"version":3,"file":"ArraySource.js","sourceRoot":"","sources":["ArraySource.ts"],"names":["ArraySource","ArraySource.constructor","ArraySource.seek","ArraySource.start","ArraySource.pull","ArraySource.cancel"],"mappings":";;;;;;;;IAAA,wBAAoB,YAAY,CAAC,CAAA;IAIjC,IAAM,QAAQ,GAAG,iBAAO,CAAC,OAAO,EAAE,CAAC;IAEnC;;OAEG;IACH;QAOCA,qBAAYA,IAAcA;YACzBC,IAAIA,CAACA,eAAeA,GAAGA,CAACA,CAACA;YACzBA,IAAIA,CAACA,IAAIA,GAAGA,EAAEA,CAACA;YAEfA,EAAEA,CAACA,CAACA,IAAIA,IAAIA,IAAIA,CAACA,MAAMA,CAACA,CAACA,CAACA;gBACzBA,IAAIA,CAACA,IAAIA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA;YACpCA,CAACA;QACFA,CAACA;QAEDD,0BAAIA,GAAJA,UAAKA,UAAuCA,EAAEA,QAAgBA;YAC7DE,EAAEA,CAACA,CAACA,QAAQA,IAAIA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,IAAIA,QAAQA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBAClDA,IAAIA,KAAKA,GAAGA,IAAIA,KAAKA,CAACA,yBAAyBA,GAAGA,QAAQA,CAACA,CAACA;gBAC5DA,UAAUA,CAACA,KAAKA,CAACA,KAAKA,CAACA,CAACA;gBAExBA,MAAMA,CAACA,iBAAOA,CAACA,MAAMA,CAACA,KAAKA,CAACA,CAACA;YAC9BA,CAACA;YAEDA,IAAIA,CAACA,eAAeA,GAAGA,QAAQA,CAACA;YAEhCA,MAAMA,CAACA,iBAAOA,CAACA,OAAOA,CAACA,IAAIA,CAACA,eAAeA,CAACA,CAACA;QAC9CA,CAACA;QAEDF,2BAAKA,GAALA,UAAMA,UAAuCA;YAC5CG,MAAMA,CAACA,QAAQA,CAACA;QACjBA,CAACA;QAEDH,0BAAIA,GAAJA,UAAKA,UAAuCA;YAC3CI,EAAEA,CAACA,CAACA,IAAIA,CAACA,eAAeA,IAAIA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,CAACA;gBAC9CA,UAAUA,CAACA,KAAKA,EAAEA,CAACA;YACpBA,CAACA;YACDA,IAAIA,CAACA,CAACA;gBACLA,IAAIA,CAACA,eAAeA,IAAIA,CAACA,CAACA;gBAC1BA,UAAUA,CAACA,OAAOA,CAACA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,eAAeA,GAAGA,CAACA,CAACA,CAACA,CAACA;YACzDA,CAACA;YAEDA,MAAMA,CAACA,QAAQA,CAACA;QACjBA,CAACA;QAEDJ,4BAAMA,GAANA,UAAOA,MAAYA;YAClBK,MAAMA,CAACA,QAAQA,CAACA;QACjBA,CAACA;QACFL,kBAACA;IAADA,CAACA,AAhDD,IAgDC;IAhDD;iCAgDC,CAAA","sourcesContent":["import Promise from '../Promise';\nimport { Source } from './ReadableStream';\nimport ReadableStreamController from './ReadableStreamController';\n\nconst resolved = Promise.resolve();\n\n/**\n * A seekable array source\n */\nexport default class ArraySource<T> implements Source<T> {\n\t// current seek position in the data array\n\tcurrentPosition: number;\n\n\t// shallow copy of data array passed to constructor\n\tdata: Array<T>;\n\n\tconstructor(data: Array<T>) {\n\t\tthis.currentPosition = 0;\n\t\tthis.data = [];\n\n\t\tif (data && data.length) {\n\t\t\tthis.data = this.data.concat(data);\n\t\t}\n\t}\n\n\tseek(controller: ReadableStreamController<T>, position: number): Promise<number> {\n\t\tif (position >= this.data.length || position < 0) {\n\t\t\tlet error = new Error('Invalid seek position: ' + position);\n\t\t\tcontroller.error(error);\n\n\t\t\treturn Promise.reject(error);\n\t\t}\n\n\t\tthis.currentPosition = position;\n\n\t\treturn Promise.resolve(this.currentPosition);\n\t}\n\n\tstart(controller: ReadableStreamController<T>): Promise<void> {\n\t\treturn resolved;\n\t}\n\n\tpull(controller: ReadableStreamController<T>): Promise<void> {\n\t\tif (this.currentPosition >= this.data.length) {\n\t\t\tcontroller.close();\n\t\t}\n\t\telse {\n\t\t\tthis.currentPosition += 1;\n\t\t\tcontroller.enqueue(this.data[this.currentPosition - 1]);\n\t\t}\n\n\t\treturn resolved;\n\t}\n\n\tcancel(reason?: any): Promise<void> {\n\t\treturn resolved;\n\t}\n}\n"]}