{"version":3,"file":"math.js","sourceRoot":"","sources":["math.ts"],"names":["acosh","asinh","atanh","cbrt","clz32","cosh","expm1","hypot","imul","log2","log10","log1p","sign","sinh","tanh","trunc"],"mappings":"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CA,CAACA,CAACA;IAC9DA,CAACA;IAPe,YAAI,OAOnB,CAAA;IAED;;;;;OAKG;IACH,cAAqB,CAAS;QAC7BC,MAAMA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,GAAGA,IAAIA,CAACA,GAAGA,CAACA;IAC/BA,CAACA;IAFe,YAAI,OAEnB,CAAA;IAED;;;;;OAKG;IACH,eAAsB,CAAS;QAC9BC,MAAMA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,GAAGA,IAAIA,CAACA,IAAIA,CAACA;IAChCA,CAACA;IAFe,aAAK,QAEpB,CAAA;IAED;;;;;OAKG;IACH,eAAsB,CAAS;QAC9BC,MAAMA,CAACA,IAAIA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA;IACxBA,CAACA;IAFe,aAAK,QAEpB,CAAA;IAED;;;;;OAKG;IACH,cAAqB,CAAS;QAC7BC,CAACA,GAAGA,MAAMA,CAACA,CAACA,CAACA,CAACA;QACdA,EAAEA,CAACA,CAACA,CAACA,KAAKA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA;YACxBA,MAAMA,CAACA,CAACA,CAACA;QACVA,CAACA;QACDA,MAAMA,CAACA,CAACA,GAAGA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA,CAACA;IACvBA,CAACA;IANe,YAAI,OAMnB,CAAA;IAED;;;;;OAKG;IACH,cAAqB,CAAS;QAC7BC,IAAMA,CAACA,GAAGA,IAAIA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA;QACtBA,MAAMA,CAACA,CAACA,CAACA,GAAGA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA;IACxBA,CAACA;IAHe,YAAI,OAGnB,CAAA;IAED;;;;;OAKG;IACH,cAAqB,CAAS;QAC7BC,EAAEA,CAACA,CAACA,CAACA,KAAKA,QAAQA,CAACA,CAACA,CAACA;YACpBA,MAAMA,CAACA,CAACA,CAACA;QACVA,CAACA;QACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,CAACA,KAAKA,CAACA,QAAQA,CAACA,CAACA,CAACA;YAC1BA,MAAMA,CAACA,CAACA,CAACA,CAACA;QACXA,CAACA;QACDA,IAAIA,CAACA,CAACA;YACLA,IAAMA,CAACA,GAAGA,IAAIA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA;YAC1BA,MAAMA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA;QAC1BA,CAACA;IACFA,CAACA;IAXe,YAAI,OAWnB,CAAA;IAED;;;;;OAKG;IACH,eAAsB,CAAS;QAC9BC,MAAMA,CAACA,CAACA,GAAGA,CAACA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA,GAAGA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA;IAC7CA,CAACA;IAFe,aAAK,QAEpB,CAAA","sourcesContent":["import has from './has';\n\nconst FRACTION_UNITS = Math.pow(2, 23);\nconst MAX_FLOAT32 = 3.4028234663852886e+38;\nconst MIN_FLOAT32 = 1.401298464324817e-45;\n\n/**\n * Returns the hyperbolic arccosine of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport function acosh(n: number): number {\n\treturn Math.log(n + Math.sqrt(n * n - 1));\n}\n\n/**\n * Returns the hyperbolic arcsine of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport function asinh(n: number): number {\n\tif (n === -Infinity) {\n\t\treturn n;\n\t}\n\telse {\n\t\treturn Math.log(n + Math.sqrt(n * n + 1));\n\t}\n}\n\n/**\n * Returns the hyperbolic arctangent of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport function atanh(n: number): number {\n\treturn Math.log((1 + n) / (1 - n)) / 2;\n}\n\n/**\n * Returns the cube root of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport function cbrt(n: number): number {\n\tconst y = Math.pow(Math.abs(n), 1 / 3);\n\treturn n < 0 ? -y : y;\n}\n\n/**\n * Returns the number of leading zero bits in the 32-bit\n * binary representation of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport function clz32(n: number): number {\n\tn = Number(n) >>> 0;\n\treturn n ? 32 - n.toString(2).length : 32;\n}\n\n/**\n * Returns the hyperbolic cosine of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport function cosh(n: number): number {\n\tconst m = Math.exp(n);\n\treturn (m + 1 / m) / 2;\n}\n\n/**\n * Returns e raised to the specified power minus one.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport function expm1(n: number): number {\n\treturn Math.exp(n) - 1;\n}\n\n/**\n * Returns the nearest single-precision float representation of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const fround: (n: number) => number = has('float32array') ? function (n: number): number {\n\treturn new Float32Array([n])[0];\n} :\nfunction (n: number): number {\n\t// Further fallback for IE9, which doesn't support Float32Array.\n\t// This gives a fair approximation in most cases.\n\n\tif (n === 0 || !isFinite(n)) {\n\t\treturn n;\n\t}\n\tif (Math.abs(n) > MAX_FLOAT32) {\n\t\treturn n > 0 ? Infinity : -Infinity;\n\t}\n\tif (Math.abs(n) < MIN_FLOAT32) {\n\t\treturn 0;\n\t}\n\tconst exponent = Math.floor(log2(Math.abs(n)));\n\treturn (Math.round((n / Math.pow(2, exponent) - 1) * FRACTION_UNITS) / FRACTION_UNITS + 1) * Math.pow(2, exponent);\n};\n\n/**\n * Returns the square root of the sum of squares of its arguments.\n *\n * @return The result\n */\nexport function hypot(...args: number[]): number {\n\t// See: http://mzl.la/1HDi6xP\n\tlet n = 0;\n\n\tfor (let arg of args) {\n\t\tif (arg === Infinity || arg === -Infinity) {\n\t\t\treturn Infinity;\n\t\t}\n\t\tn += arg * arg;\n\t}\n\treturn Math.sqrt(n);\n}\n\n/**\n * Returns the result of the 32-bit multiplication of the two parameters.\n *\n * @param n The number to use in calculation\n * @param m The number to use in calculation\n * @return The result\n */\nexport function imul(n: number, m: number): number {\n\t// See: http://mzl.la/1K279FK\n\tconst ah = (n >>> 16) & 0xffff;\n\tconst al = n & 0xffff;\n\tconst bh = (m >>> 16) & 0xffff;\n\tconst bl = m & 0xffff;\n\treturn ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);\n}\n\n/**\n * Returns the base 2 logarithm of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport function log2(n: number): number {\n\treturn Math.log(n) / Math.LN2;\n}\n\n/**\n * Returns the base 10 logarithm of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport function log10(n: number): number {\n\treturn Math.log(n) / Math.LN10;\n}\n\n/**\n * Returns the natural logarithm of 1 + a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport function log1p(n: number): number {\n\treturn Math.log(1 + n);\n}\n\n/**\n * Returns the sign of a number, indicating whether the number is positive.\n *\n * @param n The number to use in calculation\n * @return 1 if the number is positive, -1 if the number is negative, or 0 if the number is 0\n */\nexport function sign(n: number): number {\n\tn = Number(n);\n\tif (n === 0 || n !== n) {\n\t\treturn n;\n\t}\n\treturn n > 0 ? 1 : -1;\n}\n\n/**\n * Returns the hyperbolic sine of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport function sinh(n: number): number {\n\tconst m = Math.exp(n);\n\treturn (m - 1 / m) / 2;\n}\n\n/**\n * Returns the hyperbolic tangent of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport function tanh(n: number): number {\n\tif (n === Infinity) {\n\t\treturn 1;\n\t}\n\telse if (n === -Infinity) {\n\t\treturn -1;\n\t}\n\telse {\n\t\tconst y = Math.exp(2 * n);\n\t\treturn (y - 1) / (y + 1);\n\t}\n}\n\n/**\n * Returns the integral part of a number by removing any fractional digits.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport function trunc(n: number): number {\n\treturn n < 0 ? Math.ceil(n) : Math.floor(n);\n}\n"]}