{"version":3,"file":"on.js","sourceRoot":"","sources":["on.ts"],"names":["emit","on","once","pausable"],"mappings":";;;;;;;;IACA,qBAAoD,QAAQ,CAAC,CAAA;IAwB7D,cAA4C,MAAW,EAAE,KAAsB;QAC9EA,EAAEA,CAACA,CAACA,MAAMA,CAACA,aAAaA,IAAIA,MAAMA,CAACA,aAAaA,IAAIA,MAAMA,CAACA,aAAaA,CAACA,WAAWA,CAACA,CAACA,CAACA;YACtFA,IAAMA,WAAWA,GAAGA,MAAMA,CAACA,aAAaA,CAACA,WAAWA,CAACA,YAAYA,CAACA,CAACA;YACnEA,WAAWA,CAACA,SAASA,CACpBA,KAAKA,CAACA,IAAIA,EACVA,OAAOA,CAAmBA,KAAMA,CAACA,OAAOA,CAACA,EACzCA,OAAOA,CAAmBA,KAAMA,CAACA,UAAUA,CAACA,CAC5CA,CAACA;YAEFA,GAAGA,CAACA,CAACA,GAAGA,CAACA,GAAGA,IAAIA,KAAKA,CAACA,CAACA,CAACA;gBACvBA,EAAEA,CAACA,CAACA,CAACA,CAACA,GAAGA,IAAIA,WAAWA,CAACA,CAACA,CAACA,CAACA;oBAC3BA,WAAWA,CAACA,GAAGA,CAACA,GAAUA,KAAMA,CAACA,GAAGA,CAACA,CAACA;gBACvCA,CAACA;YACFA,CAACA;YAEDA,MAAMA,CAACA,MAAMA,CAACA,aAAaA,CAACA,WAAWA,CAACA,CAACA;QAC1CA,CAACA;QAEDA,EAAEA,CAACA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA;YACjBA,EAAEA,CAACA,CAACA,MAAMA,CAACA,cAAcA,CAACA,CAACA,CAACA;gBAC3BA,MAAMA,CAACA,IAAIA,CAACA,KAAKA,CAACA,IAAIA,EAAEA,KAAKA,CAACA,CAACA;gBAC/BA,MAAMA,CAACA,KAAKA,CAACA;YACdA,CAACA;YACDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,MAAMA,CAACA,EAAEA,CAACA,CAACA,CAACA;gBACpBA,MAAMA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA;gBACnBA,MAAMA,CAACA,KAAKA,CAACA;YACdA,CAACA;QACFA,CAACA;QAEDA,MAAMA,IAAIA,KAAKA,CAACA,iCAAiCA,CAACA,CAACA;IACpDA,CAACA;IA9Be,YAAI,OA8BnB,CAAA;IAYD,YAA2B,MAAW,EAAE,IAAS,EAAE,QAAa,EAAE,OAAiB;QAClFC,EAAEA,CAACA,CAACA,KAAKA,CAACA,OAAOA,CAACA,IAAIA,CAACA,CAACA,CAACA,CAACA;YACzBA,IAAIA,OAAOA,GAAaA,IAAIA,CAACA,GAAGA,CAACA,UAAUA,IAAYA;gBACtD,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;YAC5C,CAAC,CAACA,CAACA;YAEHA,MAAMA,CAACA,4BAAqBA,eAAIA,OAAOA,CAACA,CAACA;QAC1CA,CAACA;QAEDA,IAAMA,QAAQA,GAAGA;YAChB,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACjC,CAAC,CAACA;QAEFA,kBAAkBA;QAClBA,EAAEA,CAACA,CAACA,MAAMA,CAACA,gBAAgBA,IAAIA,MAAMA,CAACA,mBAAmBA,CAACA,CAACA,CAACA;YAC3DA,MAAMA,CAACA,gBAAgBA,CAACA,IAAIA,EAAEA,QAAQA,EAAEA,OAAOA,CAACA,CAACA;YACjDA,MAAMA,CAACA,mBAAYA,CAACA;gBACnB,MAAM,CAAC,mBAAmB,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;YACrD,CAAC,CAACA,CAACA;QACJA,CAACA;QAEDA,EAAEA,CAACA,CAACA,MAAMA,CAACA,EAAEA,CAACA,CAACA,CAACA;YACfA,eAAeA;YACfA,EAAEA,CAACA,CAACA,MAAMA,CAACA,cAAcA,CAACA,CAACA,CAACA;gBAC3BA,MAAMA,CAACA,EAAEA,CAACA,IAAIA,EAAEA,QAAQA,CAACA,CAACA;gBAC1BA,MAAMA,CAACA,mBAAYA,CAACA;oBACnB,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;gBACvC,CAAC,CAACA,CAACA;YACJA,CAACA;YAEDA,IAAIA,CAACA,EAAEA,CAACA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA,CAACA;gBACtBA,MAAMA,CAACA,MAAMA,CAACA,EAAEA,CAACA,IAAIA,EAAEA,QAAQA,CAACA,CAACA;YAClCA,CAACA;QACFA,CAACA;QAEDA,MAAMA,IAAIA,SAASA,CAACA,8BAA8BA,CAACA,CAACA;IACrDA,CAACA;IApCD;wBAoCC,CAAA;IAaD,cAAqB,MAAW,EAAE,IAAS,EAAE,QAAa,EAAE,OAAiB;QAC5EC,IAAMA,MAAMA,GAAGA,EAAEA,CAACA,MAAMA,EAAEA,IAAIA,EAAEA;YAC/B,MAAM,CAAC,OAAO,EAAE,CAAC;YACjB,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACxC,CAAC,EAAEA,OAAOA,CAACA,CAACA;QAEZA,MAAMA,CAACA,MAAMA,CAACA;IACfA,CAACA;IAPe,YAAI,OAOnB,CAAA;IAiBD,kBAAyB,MAAW,EAAE,IAAS,EAAE,QAAa,EAAE,OAAiB;QAChFC,IAAIA,MAAeA,CAACA;QAEpBA,IAAMA,MAAMA,GAAoBA,EAAEA,CAACA,MAAMA,EAAEA,IAAIA,EAAEA;YAChD,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACb,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YACxC,CAAC;QACF,CAAC,EAAEA,OAAOA,CAACA,CAACA;QAEZA,MAAMA,CAACA,KAAKA,GAAGA;YACd,MAAM,GAAG,IAAI,CAAC;QACf,CAAC,CAACA;QAEFA,MAAMA,CAACA,MAAMA,GAAGA;YACf,MAAM,GAAG,KAAK,CAAC;QAChB,CAAC,CAACA;QAEFA,MAAMA,CAACA,MAAMA,CAACA;IACfA,CAACA;IAlBe,gBAAQ,WAkBvB,CAAA","sourcesContent":["import { Handle, EventObject } from './interfaces';\nimport { createHandle, createCompositeHandle } from './lang';\nimport Evented from './Evented';\n\nexport interface EventCallback {\n\t(event: EventObject): void;\n}\n\nexport interface EventEmitter {\n\ton(event: string, listener: EventCallback): EventEmitter;\n\tremoveListener(event: string, listener: EventCallback): EventEmitter;\n}\n\ninterface DOMEventObject extends EventObject {\n\tbubbles: boolean;\n\tcancelable: boolean;\n}\n\n/**\n * Provides a normalized mechanism for dispatching events for event emitters, Evented objects, or DOM nodes.\n * @param target The target to emit the event from\n * @param event The event object to emit\n * @return Boolean indicating Whether the event was canceled (this will always be false for event emitters)\n */\nexport function emit<T extends EventObject>(target: Evented | EventTarget | EventEmitter, event: T | EventObject): boolean;\nexport function emit<T extends EventObject>(target: any, event: T | EventObject): boolean {\n\tif (target.dispatchEvent && target.ownerDocument && target.ownerDocument.createEvent) {\n\t\tconst nativeEvent = target.ownerDocument.createEvent('HTMLEvents');\n\t\tnativeEvent.initEvent(\n\t\t\tevent.type,\n\t\t\tBoolean((<DOMEventObject> event).bubbles),\n\t\t\tBoolean((<DOMEventObject> event).cancelable)\n\t\t);\n\n\t\tfor (let key in event) {\n\t\t\tif (!(key in nativeEvent)) {\n\t\t\t\tnativeEvent[key] = (<any> event)[key];\n\t\t\t}\n\t\t}\n\n\t\treturn target.dispatchEvent(nativeEvent);\n\t}\n\n\tif (target.emit) {\n\t\tif (target.removeListener) {\n\t\t\ttarget.emit(event.type, event);\n\t\t\treturn false;\n\t\t}\n\t\telse if (target.on) {\n\t\t\ttarget.emit(event);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tthrow new Error('Target must be an event emitter');\n}\n\n/**\n * Provides a normalized mechanism for listening to events from event emitters, Evented objects, or DOM nodes.\n * @param target Target to listen for event on\n * @param type Event event type(s) to listen for; may a string or an array of strings\n * @param listener Callback to handle the event when it fires\n * @param capture Whether the listener should be registered in the capture phase (DOM events only)\n * @return A handle which will remove the listener when destroy is called\n */\nexport default function on(target: EventTarget, type: string | string[], listener: EventCallback, capture?: boolean): Handle;\nexport default function on(target: EventEmitter | Evented, type: string | string[], listener: EventCallback): Handle;\nexport default function on(target: any, type: any, listener: any, capture?: boolean): Handle {\n\tif (Array.isArray(type)) {\n\t\tlet handles: Handle[] = type.map(function (type: string): Handle {\n\t\t\treturn on(target, type, listener, capture);\n\t\t});\n\n\t\treturn createCompositeHandle(...handles);\n\t}\n\n\tconst callback = function () {\n\t\tlistener.apply(this, arguments);\n\t};\n\n\t// DOM EventTarget\n\tif (target.addEventListener && target.removeEventListener) {\n\t\ttarget.addEventListener(type, callback, capture);\n\t\treturn createHandle(function () {\n\t\t\ttarget.removeEventListener(type, callback, capture);\n\t\t});\n\t}\n\n\tif (target.on) {\n\t\t// EventEmitter\n\t\tif (target.removeListener) {\n\t\t\ttarget.on(type, callback);\n\t\t\treturn createHandle(function () {\n\t\t\t\ttarget.removeListener(type, callback);\n\t\t\t});\n\t\t}\n\t\t// Evented\n\t\telse if (target.emit) {\n\t\t\treturn target.on(type, listener);\n\t\t}\n\t}\n\n\tthrow new TypeError('Unknown event emitter object');\n}\n\n/**\n * Provides a mechanism for listening to the next occurrence of an event from event\n * emitters, Evented objects, or DOM nodes.\n * @param target Target to listen for event on\n * @param type Event event type(s) to listen for; may be a string or an array of strings\n * @param listener Callback to handle the event when it fires\n * @param capture Whether the listener should be registered in the capture phase (DOM events only)\n * @return A handle which will remove the listener when destroy is called\n */\nexport function once(target: EventTarget, type: string | string[], listener: EventCallback, capture?: boolean): Handle;\nexport function once(target: EventEmitter | Evented, type: string | string[], listener: EventCallback): Handle;\nexport function once(target: any, type: any, listener: any, capture?: boolean): Handle {\n\tconst handle = on(target, type, function () {\n\t\thandle.destroy();\n\t\treturn listener.apply(this, arguments);\n\t}, capture);\n\n\treturn handle;\n}\n\nexport interface PausableHandle extends Handle {\n\tpause(): void;\n\tresume(): void;\n}\n\n/**\n * Provides a mechanism for creating pausable listeners for events from event emitters, Evented objects, or DOM nodes.\n * @param target Target to listen for event on\n * @param type Event event type(s) to listen for; may a string or an array of strings\n * @param listener Callback to handle the event when it fires\n * @param capture Whether the listener should be registered in the capture phase (DOM events only)\n * @return A handle with additional pause and resume methods; the listener will never fire when paused\n */\nexport function pausable(target: EventTarget, type: string | string[], listener: EventCallback, capture?: boolean): PausableHandle;\nexport function pausable(target: EventEmitter | Evented, type: string | string[], listener: EventCallback): PausableHandle;\nexport function pausable(target: any, type: any, listener: any, capture?: boolean): PausableHandle {\n\tlet paused: boolean;\n\n\tconst handle = <PausableHandle> on(target, type, function () {\n\t\tif (!paused) {\n\t\t\treturn listener.apply(this, arguments);\n\t\t}\n\t}, capture);\n\n\thandle.pause = function () {\n\t\tpaused = true;\n\t};\n\n\thandle.resume = function () {\n\t\tpaused = false;\n\t};\n\n\treturn handle;\n}\n"]}