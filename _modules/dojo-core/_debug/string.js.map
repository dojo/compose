{"version":3,"file":"string.js","sourceRoot":"","sources":["string.ts"],"names":["getPadding","normalizeSubstringArgs","codePointAt","endsWith","escapeRegExp","escapeXml","fromCodePoint","includes","padEnd","padStart","raw","repeat","startsWith"],"mappings":"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","sourcesContent":["import { Hash } from './interfaces';\n\nconst escapeRegExpPattern = /[[\\]{}()|\\/\\\\^$.*+?]/g;\nconst escapeXmlPattern = /[&<]/g;\nconst escapeXmlForPattern = /[&<>'\"]/g;\nconst escapeXmlMap: Hash<string> = {\n\t'&': '&amp;',\n\t'<': '&lt;',\n\t'>': '&gt;',\n\t'\"': '&quot;',\n\t'\\'': '&#39;'\n};\nexport const HIGH_SURROGATE_MIN = 0xD800;\nexport const HIGH_SURROGATE_MAX = 0xDBFF;\nexport const LOW_SURROGATE_MIN = 0xDC00;\nexport const LOW_SURROGATE_MAX = 0xDFFF;\n\n/**\n * Performs validation and padding operations used by padStart and padEnd.\n */\nfunction getPadding(name: string, text: string, length: number, character: string = '0'): string {\n\tif (text == null) {\n\t\tthrow new TypeError('string.' + name + ' requires a valid string.');\n\t}\n\n\tif (character.length !== 1) {\n\t\tthrow new TypeError('string.' + name + ' requires a valid padding character.');\n\t}\n\n\tif (length < 0 || length === Infinity) {\n\t\tthrow new RangeError('string.' + name + ' requires a valid length.');\n\t}\n\n\tlength -= text.length;\n\treturn length < 1 ? '' : repeat(character, length);\n}\n\n/**\n * Validates that text is defined, and normalizes position (based on the given default if the input is NaN).\n * Used by startsWith, includes, and endsWith.\n * @return Normalized position.\n */\nfunction normalizeSubstringArgs(name: string, text: string, search: string, position: number,\n\t\tisEnd: boolean = false): [ string, string, number ] {\n\tif (text == null) {\n\t\tthrow new TypeError('string.' + name + ' requires a valid string to search against.');\n\t}\n\n\tconst length = text.length;\n\tposition = position !== position ? (isEnd ? length : 0) : position;\n\treturn [ text, String(search), Math.min(Math.max(position, 0), length) ];\n}\n\n/**\n * Returns the UTF-16 encoded code point value of a given position in a string.\n * @param text The string containing the element whose code point is to be determined\n * @param position Position of an element within the string to retrieve the code point value from\n * @return A non-negative integer representing the UTF-16 encoded code point value\n */\nexport function codePointAt(text: string, position: number = 0) {\n\t// Adapted from https://github.com/mathiasbynens/String.prototype.codePointAt\n\tif (text == null) {\n\t\tthrow new TypeError('string.codePointAt requries a valid string.');\n\t}\n\tconst length = text.length;\n\n\tif (position !== position) {\n\t\tposition = 0;\n\t}\n\tif (position < 0 || position >= length) {\n\t\treturn undefined;\n\t}\n\n\t// Get the first code unit\n\tconst first = text.charCodeAt(position);\n\tif (first >= HIGH_SURROGATE_MIN && first <= HIGH_SURROGATE_MAX && length > position + 1) {\n\t\t// Start of a surrogate pair (high surrogate and there is a next code unit); check for low surrogate\n\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\tconst second = text.charCodeAt(position + 1);\n\t\tif (second >= LOW_SURROGATE_MIN && second <= LOW_SURROGATE_MAX) {\n\t\t\treturn (first - HIGH_SURROGATE_MIN) * 0x400 + second - LOW_SURROGATE_MIN + 0x10000;\n\t\t}\n\t}\n\treturn first;\n}\n\n/**\n * Determines whether a string ends with the given substring.\n * @param text The string to look for the search string within\n * @param search The string to search for\n * @param endPosition The index searching should stop before (defaults to text.length)\n * @return Boolean indicating if the search string was found at the end of the given string\n */\nexport function endsWith(text: string, search: string, endPosition?: number): boolean {\n\tif (endPosition == null && text != null) {\n\t\tendPosition = text.length;\n\t}\n\n\t[ text, search, endPosition ] = normalizeSubstringArgs('endsWith', text, search, endPosition, true);\n\n\tconst start = endPosition - search.length;\n\tif (start < 0) {\n\t\treturn false;\n\t}\n\n\treturn text.slice(start, endPosition) === search;\n}\n\n/**\n * Escapes a string so that it can safely be passed to the RegExp constructor.\n * @param text The string to be escaped\n * @return The escaped string\n */\nexport function escapeRegExp(text: string): string {\n\treturn !text ? text : text.replace(escapeRegExpPattern, '\\\\$&');\n}\n\n/**\n * Sanitizes a string to protect against tag injection.\n * @param xml The string to be escaped\n * @param forAttribute Whether to also escape ', \", and > in addition to < and &\n * @return The escaped string\n */\nexport function escapeXml(xml: string, forAttribute: boolean = true): string {\n\tif (!xml) {\n\t\treturn xml;\n\t}\n\n\tconst pattern = forAttribute ? escapeXmlForPattern : escapeXmlPattern;\n\n\treturn xml.replace(pattern, function (character: string): string {\n\t\treturn escapeXmlMap[character];\n\t});\n}\n\n/**\n * Returns a string created by using the specified sequence of code points.\n * @param codePoints One or more code points\n * @return A string containing the given code points\n */\nexport function fromCodePoint(...codePoints: number[]): string {\n\t// Adapted from https://github.com/mathiasbynens/String.fromCodePoint\n\tconst length = arguments.length;\n\tif (!length) {\n\t\treturn '';\n\t}\n\n\tconst fromCharCode = String.fromCharCode;\n\tconst MAX_SIZE = 0x4000;\n\tlet codeUnits: number[] = [];\n\tlet index = -1;\n\tlet result = '';\n\n\twhile (++index < length) {\n\t\tlet codePoint = Number(arguments[index]);\n\n\t\t// Code points must be finite integers within the valid range\n\t\tlet isValid = isFinite(codePoint) && Math.floor(codePoint) === codePoint &&\n\t\t\tcodePoint >= 0 && codePoint <= 0x10FFFF;\n\t\tif (!isValid) {\n\t\t\tthrow RangeError('string.fromCodePoint: Invalid code point ' + codePoint);\n\t\t}\n\n\t\tif (codePoint <= 0xFFFF) {\n\t\t\t// BMP code point\n\t\t\tcodeUnits.push(codePoint);\n\t\t}\n\t\telse {\n\t\t\t// Astral code point; split in surrogate halves\n\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\tcodePoint -= 0x10000;\n\t\t\tlet highSurrogate = (codePoint >> 10) + HIGH_SURROGATE_MIN;\n\t\t\tlet lowSurrogate = (codePoint % 0x400) + LOW_SURROGATE_MIN;\n\t\t\tcodeUnits.push(highSurrogate, lowSurrogate);\n\t\t}\n\n\t\tif (index + 1 === length || codeUnits.length > MAX_SIZE) {\n\t\t\tresult += fromCharCode.apply(null, codeUnits);\n\t\t\tcodeUnits.length = 0;\n\t\t}\n\t}\n\treturn result;\n}\n\n/**\n * Determines whether a string includes the given substring (optionally starting from a given index).\n * @param text The string to look for the search string within\n * @param search The string to search for\n * @param position The index to begin searching at\n * @return Boolean indicating if the search string was found within the given string\n */\nexport function includes(text: string, search: string, position: number = 0): boolean {\n\t[ text, search, position ] = normalizeSubstringArgs('includes', text, search, position);\n\treturn text.indexOf(search, position) !== -1;\n}\n\n/**\n * Adds padding to the end of a string to ensure it is a certain length.\n * @param text The string to pad\n * @param length The target minimum length of the string\n * @param character The character to pad onto the end of the string\n * @return The string, padded to the given length if necessary\n */\nexport function padEnd(text: string, length: number, character: string = '0'): string {\n\treturn text + getPadding('padEnd', text, length, character);\n}\n\n/**\n * Adds padding to the beginning of a string to ensure it is a certain length.\n * @param text The string to pad\n * @param length The target minimum length of the string\n * @param character The character to pad onto the beginning of the string\n * @return The string, padded to the given length if necessary\n */\nexport function padStart(text: string, length: number, character: string = '0'): string {\n\treturn getPadding('padStart', text, length, character) + text;\n}\n\n/**\n * A tag function for template strings to get the template string's raw string form.\n * @param callSite Call site object (or a template string in TypeScript, which will transpile to one)\n * @param substitutions Values to substitute within the template string (TypeScript will generate these automatically)\n * @return String containing the raw template string with variables substituted\n *\n * @example\n * // Within TypeScript; logs 'The answer is:\\\\n42'\n * let answer = 42;\n * console.log(string.raw`The answer is:\\n${answer}`);\n *\n * @example\n * // The same example as above, but directly specifying a JavaScript object and substitution\n * console.log(string.raw({ raw: [ 'The answer is:\\\\n', '' ] }, 42));\n */\nexport function raw(callSite: TemplateStringsArray, ...substitutions: any[]): string {\n\tlet rawStrings = callSite.raw;\n\tlet result = '';\n\tlet numSubstitutions = substitutions.length;\n\n\tif (callSite == null || callSite.raw == null) {\n\t\tthrow new TypeError('string.raw requires a valid callSite object with a raw value');\n\t}\n\n\tfor (let i = 0, length = rawStrings.length; i < length; i++) {\n\t\tresult += rawStrings[i] + (i < numSubstitutions && i < length - 1 ? substitutions[i] : '');\n\t}\n\n\treturn result;\n}\n\n/**\n * Returns a string containing the given string repeated the specified number of times.\n * @param text The string to repeat\n * @param count The number of times to repeat the string\n * @return A string containing the input string repeated count times\n */\nexport function repeat(text: string, count: number = 0): string {\n\t// Adapted from https://github.com/mathiasbynens/String.prototype.repeat\n\tif (text == null) {\n\t\tthrow new TypeError('string.repeat requires a valid string.');\n\t}\n\tif (count !== count) {\n\t\tcount = 0;\n\t}\n\tif (count < 0 || count === Infinity) {\n\t\tthrow new RangeError('string.repeat requires a non-negative finite count.');\n\t}\n\n\tlet result = '';\n\twhile (count) {\n\t\tif (count % 2) {\n\t\t\tresult += text;\n\t\t}\n\t\tif (count > 1) {\n\t\t\ttext += text;\n\t\t}\n\t\tcount >>= 1;\n\t}\n\treturn result;\n}\n\n/**\n * Determines whether a string begins with the given substring (optionally starting from a given index).\n * @param text The string to look for the search string within\n * @param search The string to search for\n * @param position The index to begin searching at\n * @return Boolean indicating if the search string was found at the beginning of the given string\n */\nexport function startsWith(text: string, search: string, position: number = 0): boolean {\n\tsearch = String(search);\n\t[ text, search, position ] = normalizeSubstringArgs('startsWith', text, search, position);\n\n\tconst end = position + search.length;\n\tif (end > text.length) {\n\t\treturn false;\n\t}\n\n\treturn text.slice(position, end) === search;\n}\n"]}