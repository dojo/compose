{"version":3,"file":"number.js","sourceRoot":"","sources":["number.ts"],"names":["isNaN","isFinite","isInteger","isSafeInteger"],"mappings":";;;;;;;;IAAA,uBAAmB,UAAU,CAAC,CAAA;IAEjB,eAAO,GAAG,CAAC,CAAC;IACZ,wBAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;IACvC,wBAAgB,GAAG,CAAC,wBAAgB,CAAC;IAElD;;;;;OAKG;IACH,eAAsB,KAAU;QAC/BA,MAAMA,CAACA,OAAOA,KAAKA,KAAKA,QAAQA,IAAIA,gBAAMA,CAACA,KAAKA,CAACA,KAAKA,CAACA,CAACA;IACzDA,CAACA;IAFe,aAAK,QAEpB,CAAA;IAED;;;;;OAKG;IACH,kBAAyB,KAAU;QAClCC,MAAMA,CAACA,OAAOA,KAAKA,KAAKA,QAAQA,IAAIA,gBAAMA,CAACA,QAAQA,CAACA,KAAKA,CAACA,CAACA;IAC5DA,CAACA;IAFe,gBAAQ,WAEvB,CAAA;IAED;;;;;OAKG;IACH,mBAA0B,KAAU;QACnCC,MAAMA,CAACA,QAAQA,CAACA,KAAKA,CAACA,IAAIA,IAAIA,CAACA,KAAKA,CAACA,KAAKA,CAACA,KAAKA,KAAKA,CAACA;IACvDA,CAACA;IAFe,iBAAS,YAExB,CAAA;IAED;;;;;;;;OAQG;IACH,uBAA8B,KAAU;QACvCC,MAAMA,CAACA,SAASA,CAACA,KAAKA,CAACA,IAAIA,IAAIA,CAACA,GAAGA,CAACA,KAAKA,CAACA,IAAIA,wBAAgBA,CAACA;IAChEA,CAACA;IAFe,qBAAa,gBAE5B,CAAA","sourcesContent":["import global from './global';\n\nexport const EPSILON = 1;\nexport const MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;\nexport const MIN_SAFE_INTEGER = -MAX_SAFE_INTEGER;\n\n/**\n * Determines whether the passed value is NaN without coersion.\n *\n * @param value The value to test\n * @return true if the value is NaN, false if it is not\n */\nexport function isNaN(value: any): boolean {\n\treturn typeof value === 'number' && global.isNaN(value);\n}\n\n/**\n * Determines whether the passed value is a finite number without coersion.\n *\n * @param value The value to test\n * @return true if the value is finite, false if it is not\n */\nexport function isFinite(value: any): boolean {\n\treturn typeof value === 'number' && global.isFinite(value);\n}\n\n/**\n * Determines whether the passed value is an integer.\n *\n * @param value The value to test\n * @return true if the value is an integer, false if it is not\n */\nexport function isInteger(value: any): boolean {\n\treturn isFinite(value) && Math.floor(value) === value;\n}\n\n/**\n * Determines whether the passed value is an integer that is 'safe,' meaning:\n *   1. it can be expressed as an IEEE-754 double precision number\n *   2. it has a one-to-one mapping to a mathematical integer, meaning its\n *      IEEE-754 representation cannot be the result of rounding any other\n *      integer to fit the IEEE-754 representation\n * @param value The value to test\n * @return true if the value is an integer, false if it is not\n */\nexport function isSafeInteger(value: any): boolean {\n\treturn isInteger(value) && Math.abs(value) <= MAX_SAFE_INTEGER;\n}\n"]}