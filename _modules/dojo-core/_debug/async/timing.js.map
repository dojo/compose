{"version":3,"file":"timing.js","sourceRoot":"","sources":["timing.ts"],"names":["delay","timeout","DelayedRejection","DelayedRejection.constructor"],"mappings":";;;;;;;;;;;;;IAAA,wBAAoB,YAAY,CAAC,CAAA;IAEjC;;;;;OAKG;IACH,eAAyB,YAAoB;QAC5CA,MAAMA,CAACA,UAAUA,KAAQA;YACxB,MAAM,CAAC,IAAI,iBAAO,CAAC,UAAU,OAAO;gBACnC,UAAU,CAAC;oBACV,OAAO,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC,EAAE,YAAY,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;QACJ,CAAC,CAACA;IACHA,CAACA;IARe,aAAK,QAQpB,CAAA;IAMD;;;;;;OAMG;IACH,iBAA2B,YAAoB,EAAE,MAAa;QAC7DC,IAAMA,KAAKA,GAAGA,IAAIA,CAACA,GAAGA,EAAEA,CAACA;QACzBA,MAAMA,CAACA,UAAUA,KAAQA;YACxB,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC;gBACvC,MAAM,CAAC,iBAAO,CAAC,MAAM,CAAI,MAAM,CAAC,CAAC;YAClC,CAAC;YACD,MAAM,CAAC,iBAAO,CAAC,OAAO,CAAI,KAAK,CAAC,CAAC;QAClC,CAAC,CAACA;IACHA,CAACA;IARe,eAAO,UAQtB,CAAA;IAED;;;OAGG;IACH;QAAsCC,oCAAYA;QACjDA;;;WAGGA;QACHA,0BAAYA,YAAoBA,EAAEA,MAAcA;YAC/CC,kBAAMA,UAAUA,OAAOA,EAAEA,MAAMA;gBAC9B,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,YAAY,CAAC,CAAC;YAClF,CAAC,CAACA,CAACA;QACJA,CAACA;QACFD,uBAACA;IAADA,CAACA,AAVD,EAAsC,iBAAO,EAU5C;IAVY,wBAAgB,mBAU5B,CAAA;IAAA,CAAC","sourcesContent":["import Promise from '../Promise';\n\n/**\n * Used for delaying a Promise chain for a specific number of milliseconds.\n *\n * @param milliseconds the number of milliseconds to delay\n * @return {function(T): Promise<T>} a function producing a promise that eventually returns the value passed to it; usable with Thenable.then()\n */\nexport function delay<T>(milliseconds: number): Identity<T> {\n\treturn function (value: T): Promise<T> {\n\t\treturn new Promise(function (resolve) {\n\t\t\tsetTimeout(function () {\n\t\t\t\tresolve(value);\n\t\t\t}, milliseconds);\n\t\t});\n\t};\n}\n\nexport interface Identity<T> {\n\t(value: T): Promise<T>;\n}\n\n/**\n * Reject a promise chain if a result hasn't been found before the timeout\n *\n * @param milliseconds after this number of milliseconds a rejection will be returned\n * @param reason The reason for the rejection\n * @return {function(T): Promise<T>} a function that produces a promise that is rejected or resolved based on your timeout\n */\nexport function timeout<T>(milliseconds: number, reason: Error): Identity<T> {\n\tconst start = Date.now();\n\treturn function (value: T): Promise<T> {\n\t\tif (Date.now() - milliseconds > start) {\n\t\t\treturn Promise.reject<T>(reason);\n\t\t}\n\t\treturn Promise.resolve<T>(value);\n\t};\n}\n\n/**\n * A Promise that will reject itself automatically after a time.\n * Useful for combining with other promises in Promise.race.\n */\nexport class DelayedRejection extends Promise<any> {\n\t/**\n\t * @param milliseconds the number of milliseconds to wait before triggering a rejection\n\t * @param reason the reason for the rejection\n\t */\n\tconstructor(milliseconds: number, reason?: Error) {\n\t\tsuper(function (resolve, reject) {\n\t\t\tsetTimeout(reason ? reject.bind(this, reason) : reject.bind(this), milliseconds);\n\t\t});\n\t}\n};\n"]}