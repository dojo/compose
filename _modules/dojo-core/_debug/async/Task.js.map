{"version":3,"file":"Task.js","sourceRoot":"","sources":["Task.ts"],"names":["Task","Task.constructor","Task.all","Task.race","Task.reject","Task.resolve","Task.copy","Task._cancel","Task.cancel","Task.finally","Task.then","Task.catch"],"mappings":"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","sourcesContent":["import Promise, { Executor, State, Thenable, isThenable } from '../Promise';\n\nexport const Canceled = <State> 4;\n\n/**\n * Task is an extension of Promise that supports cancelation.\n */\nexport default class Task<T> extends Promise<T> {\n\tstatic all<T>(items: (T | Thenable<T>)[]): Task<T[]> {\n\t\treturn <any> super.all(items);\n\t}\n\n\tstatic race<T>(items: (T | Thenable<T>)[]): Task<T> {\n\t\treturn <any> super.race(items);\n\t}\n\n\tstatic reject<T>(reason: Error): Task<any> {\n\t\treturn <any> super.reject(reason);\n\t}\n\n\tstatic resolve(): Task<void>;\n\tstatic resolve<T>(value: (T | Thenable<T>)): Task<T>;\n\tstatic resolve<T>(value?: any): Task<T> {\n\t\treturn <any> super.resolve(value);\n\t}\n\n\tprotected static copy<U>(other: Promise<U>): Task<U> {\n\t\tconst task = <Task<U>> super.copy(other);\n\t\ttask.children = [];\n\t\ttask.canceler = other instanceof Task ? other.canceler : function () {};\n\t\treturn task;\n\t}\n\n\tconstructor(executor: Executor<T>, canceler?: () => void) {\n\t\tsuper((resolve, reject) => {\n\t\t\t// Don't let the Task resolve if it's been canceled\n\t\t\texecutor(\n\t\t\t\t(value) => {\n\t\t\t\t\tif (this._state === Canceled) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tresolve(value);\n\t\t\t\t},\n\t\t\t\t(reason) => {\n\t\t\t\t\tif (this._state === Canceled) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\treject(reason);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\n\t\tthis.children = [];\n\t\tthis.canceler = () => {\n\t\t\tif (canceler) {\n\t\t\t\tcanceler();\n\t\t\t}\n\t\t\tthis._cancel();\n\t\t};\n\t}\n\n\t/**\n\t * A cancelation handler that will be called if this task is canceled.\n\t */\n\tprivate canceler: () => void;\n\n\t/**\n\t * Children of this Task (i.e., Tasks that were created from this Task with `then` or `catch`).\n\t */\n\tprivate children: Task<any>[];\n\n\t/**\n\t * The finally callback for this Task (if it was created by a call to `finally`).\n\t */\n\tprivate _finally: () => void | Thenable<any>;\n\n\t/**\n\t * Propagates cancelation down through a Task tree. The Task's state is immediately set to canceled. If a Thenable\n\t * finally task was passed in, it is resolved before calling this Task's finally callback; otherwise, this Task's\n\t * finally callback is immediately executed. `_cancel` is called for each child Task, passing in the value returned\n\t * by this Task's finally callback or a Promise chain that will eventually resolve to that value.\n\t */\n\tprivate _cancel(finallyTask?: void | Thenable<any>): void {\n\t\tthis._state = Canceled;\n\n\t\tconst runFinally = () => {\n\t\t\ttry {\n\t\t\t\treturn this._finally();\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\t// Any errors in a `finally` callback are completely ignored during cancelation\n\t\t\t}\n\t\t};\n\n\t\tif (this._finally) {\n\t\t\tif (isThenable(finallyTask)) {\n\t\t\t\tfinallyTask = (<Thenable<any>> finallyTask).then(runFinally, runFinally);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfinallyTask = runFinally();\n\t\t\t}\n\t\t}\n\n\t\tthis.children.forEach(function (child) {\n\t\t\tchild._cancel(finallyTask);\n\t\t});\n\t}\n\n\t/**\n\t * Immediately cancels this task if it has not already resolved. This Task and any descendants are synchronously set\n\t * to the Canceled state and any `finally` added downstream from the canceled Task are invoked.\n\t */\n\tcancel(): void {\n\t\tif (this._state === State.Pending) {\n\t\t\tthis.canceler();\n\t\t}\n\t}\n\n\tfinally(callback: () => void | Thenable<any>): Task<T> {\n\t\tconst task = <Task<T>> super.finally(callback);\n\t\t// Keep a reference to the callback; it will be called if the Task is canceled\n\t\ttask._finally = callback;\n\t\treturn task;\n\t}\n\n\tthen<U>(onFulfilled?: (value: T) => U | Thenable<U>,  onRejected?: (error: Error) => U | Thenable<U>): Task<U> {\n\t\tconst task = <Task<U>> super.then<U>(\n\t\t\t// Don't call the onFulfilled or onRejected handlers if this Task is canceled\n\t\t\tfunction (value) {\n\t\t\t\tif (task._state === Canceled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (onFulfilled) {\n\t\t\t\t\treturn onFulfilled(value);\n\t\t\t\t}\n\t\t\t\treturn <any> value;\n\t\t\t},\n\t\t\tfunction (error) {\n\t\t\t\tif (task._state === Canceled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (onRejected) {\n\t\t\t\t\treturn onRejected(error);\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t);\n\n\t\ttask.canceler = () => {\n\t\t\t// If task's parent (this) hasn't been resolved, cancel it; downward propagation will start at the first\n\t\t\t// unresolved parent\n\t\t\tif (this._state === State.Pending) {\n\t\t\t\tthis.cancel();\n\t\t\t}\n\t\t\t// If task's parent has been resolved, propagate cancelation to the task's descendants\n\t\t\telse {\n\t\t\t\ttask._cancel();\n\t\t\t}\n\t\t};\n\n\t\t// Keep track of child Tasks for propogating cancelation back down the chain\n\t\tthis.children.push(task);\n\n\t\treturn task;\n\t}\n\n\tcatch<U>(onRejected: (reason?: Error) => (U | Thenable<U>)): Task<U> {\n\t\treturn <any> super.catch(onRejected);\n\t}\n\n}\n"]}