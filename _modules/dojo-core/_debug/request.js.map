{"version":3,"file":"request.js","sourceRoot":"","sources":["request.ts"],"names":["FilterRegistry","FilterRegistry.constructor","FilterRegistry.register","ProviderRegistry","ProviderRegistry.constructor","ProviderRegistry.register","request"],"mappings":"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","sourcesContent":["import Task from './async/Task';\nimport has from './has';\nimport { Handle } from './interfaces';\nimport Promise from './Promise';\nimport Registry, { Test } from './Registry';\nimport load from './load';\nimport { ParamList } from './UrlSearchParams';\n\ndeclare var require: any;\n\nexport class FilterRegistry extends Registry<RequestFilter> {\n\tregister(test: string | RegExp | RequestFilterTest, value: RequestFilter, first?: boolean): Handle {\n\t\tlet entryTest: Test;\n\n\t\tif (typeof test === 'string') {\n\t\t\tentryTest = (response, url, options) => {\n\t\t\t\treturn test === url;\n\t\t\t};\n\t\t}\n\t\telse if (test instanceof RegExp) {\n\t\t\tentryTest = (response, url, options) => {\n\t\t\t\treturn test.test(url);\n\t\t\t};\n\t\t}\n\t\telse {\n\t\t\tentryTest = <RequestFilterTest> test;\n\t\t}\n\n\t\treturn super.register(entryTest, value, first);\n\t}\n}\n\nlet defaultProvider: string = './request/xhr';\nif (has('host-node')) {\n\tdefaultProvider = './request/node';\n}\n\nexport class ProviderRegistry extends Registry<RequestProvider> {\n\tprivate _providerPromise: Promise<RequestProvider>;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst deferRequest = (url: string, options?: RequestOptions): ResponsePromise<any> => {\n\t\t\tlet canceled = false;\n\t\t\tlet actualResponse: ResponsePromise<any>;\n\t\t\treturn new Task<Response<any>>((resolve, reject) => {\n\t\t\t\tthis._providerPromise.then(function (provider) {\n\t\t\t\t\tif (canceled) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tactualResponse = provider(url, options);\n\t\t\t\t\tactualResponse.then(resolve, reject);\n\t\t\t\t});\n\t\t\t}, function () {\n\t\t\t\tif (!canceled) {\n\t\t\t\t\tcanceled = true;\n\t\t\t\t}\n\t\t\t\tif (actualResponse) {\n\t\t\t\t\tactualResponse.cancel();\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// The first request to hit the default value will kick off the import of the default\n\t\t// provider. While that import is in-flight, subsequent requests will queue up while\n\t\t// waiting for the provider to be fulfilled.\n\t\tthis._defaultValue = (url: string, options?: RequestOptions): ResponsePromise<any> => {\n\t\t\tthis._providerPromise = load(require, defaultProvider).then(([ providerModule ]: [ { default: RequestProvider } ]): RequestProvider => {\n\t\t\t\tthis._defaultValue = providerModule.default;\n\t\t\t\treturn providerModule.default;\n\t\t\t});\n\t\t\tthis._defaultValue = deferRequest;\n\t\t\treturn deferRequest(url, options);\n\t\t};\n\t}\n\n\tregister(test: string | RegExp | RequestProviderTest, value: RequestProvider, first?: boolean): Handle {\n\t\tlet entryTest: Test;\n\n\t\tif (typeof test === 'string') {\n\t\t\tentryTest = (url, options) => {\n\t\t\t\treturn test === url;\n\t\t\t};\n\t\t}\n\t\telse if (test instanceof RegExp) {\n\t\t\tentryTest = (url, options) => {\n\t\t\t\treturn test.test(url);\n\t\t\t};\n\t\t}\n\t\telse {\n\t\t\tentryTest = <RequestProviderTest> test;\n\t\t}\n\n\t\treturn super.register(entryTest, value, first);\n\t}\n}\n\n/**\n * Request filters, which filter or modify responses. The default filter simply passes a response through unchanged.\n */\nexport const filterRegistry = new FilterRegistry(function (response: Response<any>): Response<any> {\n\treturn response;\n});\n\n/**\n * Request providers, which fulfill requests.\n */\nexport const providerRegistry = new ProviderRegistry();\n\nexport interface RequestError<T> extends Error {\n\tresponse: Response<T>;\n}\n\nexport interface RequestFilter {\n\t<T>(response: Response<T>, url: string, options?: RequestOptions): T;\n}\n\nexport interface RequestFilterTest extends Test {\n\t<T>(response: Response<any>, url: string, options?: RequestOptions): boolean;\n}\n\nexport interface RequestOptions {\n\tauth?: string;\n\tcacheBust?: any;\n\tdata?: any;\n\thandleAs?: string;\n\theaders?: { [name: string]: string; };\n\tmethod?: string;\n\tpassword?: string;\n\tquery?: string | ParamList;\n\tresponseType?: string;\n\ttimeout?: number;\n\tuser?: string;\n}\n\nexport interface RequestProvider {\n\t<T>(url: string, options?: RequestOptions): ResponsePromise<T>;\n}\n\nexport interface RequestProviderTest extends Test {\n\t(url: string, options?: RequestOptions): boolean;\n}\n\nexport interface Response<T> {\n\tdata: T;\n\tnativeResponse?: any;\n\trequestOptions: RequestOptions;\n\tstatusCode: number;\n\tstatusText?: string;\n\turl: string;\n\n\tgetHeader(name: string): string;\n}\n\n/**\n * The task returned by a request, which will resolve to a Response\n */\nexport interface ResponsePromise<T> extends Task<Response<T>> {}\n\n/**\n * Make a request, returning a Promise that will resolve or reject when the request completes.\n */\nconst request: {\n\t<T>(url: string, options?: RequestOptions): ResponsePromise<T>;\n\tdelete<T>(url: string, options?: RequestOptions): ResponsePromise<T>;\n\tget<T>(url: string, options?: RequestOptions): ResponsePromise<T>;\n\tpost<T>(url: string, options?: RequestOptions): ResponsePromise<T>;\n\tput<T>(url: string, options?: RequestOptions): ResponsePromise<T>;\n} = <any> function request<T>(url: string, options: RequestOptions = {}): ResponsePromise<T> {\n\tconst promise = providerRegistry.match(url, options)(url, options)\n\t\t.then(function (response: Response<T>) {\n\t\t\treturn Task.resolve(filterRegistry.match(response, url, options)(response, url, options))\n\t\t\t\t.then(function (filterResponse: any) {\n\t\t\t\t\tresponse.data = filterResponse.data;\n\t\t\t\t\treturn response;\n\t\t\t\t});\n\t\t});\n\n\treturn promise;\n};\n\n[ 'DELETE', 'GET', 'POST', 'PUT' ].forEach(function (method) {\n\t(<any> request)[method.toLowerCase()] = function <T>(url: string, options: RequestOptions = {}): ResponsePromise<T> {\n\t\toptions = Object.create(options);\n\t\toptions.method = method;\n\t\treturn request(url, options);\n\t};\n});\n\nexport default request;\n\n/**\n * Add a filter that automatically parses incoming JSON responses.\n */\nfilterRegistry.register(\n\tfunction (response: Response<any>, url: string, options: RequestOptions) {\n\t\treturn typeof response.data === 'string' && options.responseType === 'json';\n\t},\n\tfunction (response: Response<any>, url: string, options: RequestOptions): Object {\n\t\treturn {\n\t\t\tdata: JSON.parse(response.data)\n\t\t};\n\t}\n);\n"]}