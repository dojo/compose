{"version":3,"file":"Map.js","sourceRoot":"","sources":["Map.ts"],"names":["Map","Map.constructor","Map._indexOfKey","Map.size","Map.clear","Map.delete","Map.forEach","Map.get","Map.has","Map.set"],"mappings":"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","sourcesContent":["import { ArrayLike } from './array';\nimport { is } from './object';\n\n/**\n * An implementation analogous to the Map specification in ES2015,\n * with the exception of iterators.  The entries, keys, and values methods\n * are omitted, since forEach essentially provides the same functionality.\n */\nexport default class Map<K, V> {\n\tprotected _keys: K[] = [];\n\tprotected _values: V[] = [];\n\n\t/*\n\t * An alternative to Array.prototype.indexOf using Object.is\n\t * to check for equality. See http://mzl.la/1zuKO2V\n\t */\n\tprotected _indexOfKey(keys: K[], key: K): number {\n\t\tfor (let i = 0, length = keys.length; i < length; i++) {\n\t\t\tif (is(keys[i], key)) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Creates a new Map\n\t *\n\t * @constructor\n\t *\n\t * @param arrayLike\n\t * Array or array-like object containing two-item tuples used to initially populate the map.\n\t * The first item in each tuple corresponds to the key of the map entry.\n\t * The second item corresponds to the value of the map entry.\n\t */\n\tconstructor(arrayLike?: ArrayLike<[ K, V ]>) {\n\t\tif (arrayLike) {\n\t\t\tfor (let i = 0, length = arrayLike.length; i < length; i++) {\n\t\t\t\tthis.set(arrayLike[i][0], arrayLike[i][1]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the number of key / value pairs in the Map.\n\t *\n\t * @return the number of key / value pairs in the Map\n\t */\n\tget size(): number {\n\t\treturn this._keys.length;\n\t}\n\n\t/**\n\t * Deletes all keys and their associated values.\n\t */\n\tclear(): void {\n\t\tthis._keys.length = this._values.length = 0;\n\t}\n\n\t/**\n\t * Deletes a given key and its associated value.\n\t *\n\t * @param key The key to delete\n\t * @return true if the key exists, false if it does not\n\t */\n\tdelete(key: K): boolean {\n\t\tconst index = this._indexOfKey(this._keys, key);\n\t\tif (index < 0) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._keys.splice(index, 1);\n\t\tthis._values.splice(index, 1);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Executes a given function for each map entry. The function\n\t * is invoked with three arguments: the element value, the\n\t * element key, and the associated Map instance.\n\t *\n\t * @param callback The function to execute for each map entry,\n\t * @param context The value to use for `this` for each execution of the calback\n\t */\n\tforEach(callback: (value: V, key: K, mapInstance: Map<K, V>) => any, context?: {}) {\n\t\tconst keys = this._keys;\n\t\tconst values = this._values;\n\t\tfor (let i = 0, length = keys.length; i < length; i++) {\n\t\t\tcallback.call(context, values[i], keys[i], this);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the value associated with a given key.\n\t *\n\t * @param key The key to look up\n\t * @return The value if one exists or undefined\n\t */\n\tget(key: K): V {\n\t\tconst index = this._indexOfKey(this._keys, key);\n\t\treturn index < 0 ? undefined : this._values[index];\n\t}\n\n\t/**\n\t * Checks for the presence of a given key.\n\t *\n\t * @param key The key to check for\n\t * @return true if the key exists, false if it does not\n\t */\n\thas(key: K): boolean {\n\t\treturn this._indexOfKey(this._keys, key) > -1;\n\t}\n\n\t/**\n\t * Sets the value associated with a given key.\n\t *\n\t * @param key The key to define a value to\n\t * @param value The value to assign\n\t * @return The Map instance\n\t */\n\tset(key: K, value: V): Map<K, V> {\n\t\tlet index = this._indexOfKey(this._keys, key);\n\t\tindex = index < 0 ? this._keys.length : index;\n\t\tthis._keys[index] = key;\n\t\tthis._values[index] = value;\n\t\treturn this;\n\t}\n}\n"]}