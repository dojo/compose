{"version":3,"file":"UrlSearchParams.js","sourceRoot":"","sources":["UrlSearchParams.ts"],"names":["parseQueryString","UrlSearchParams","UrlSearchParams.constructor","UrlSearchParams.append","UrlSearchParams.delete","UrlSearchParams.get","UrlSearchParams.getAll","UrlSearchParams.has","UrlSearchParams.keys","UrlSearchParams.set","UrlSearchParams.toString"],"mappings":"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","sourcesContent":["import { Hash } from './interfaces';\nimport { duplicate } from './lang';\n\n/**\n * Object with string keys and string or string array values that describes a query string.\n */\nexport type ParamList = Hash<string | string[]>;\n\n/**\n * Parses a query string, returning a ParamList object.\n */\nfunction parseQueryString(input: string): ParamList {\n\tconst query: Hash<string[]> = {};\n\tfor (const entry of input.split('&')) {\n\t\tconst indexOfFirstEquals = entry.indexOf('=');\n\t\tlet key: string;\n\t\tlet value: string;\n\n\t\tif (indexOfFirstEquals >= 0) {\n\t\t\tkey = entry.slice(0, indexOfFirstEquals);\n\t\t\tvalue = entry.slice(indexOfFirstEquals + 1);\n\t\t} else {\n\t\t\tkey = entry;\n\t\t}\n\n\t\tkey = key ? decodeURIComponent(key) : '';\n\t\tvalue = value ? decodeURIComponent(value) : '';\n\n\t\tif (key in query) {\n\t\t\tquery[key].push(value);\n\t\t}\n\t\telse {\n\t\t\tquery[key] = [ value ];\n\t\t}\n\t}\n\treturn query;\n}\n\n/**\n * Represents a set of URL query search parameters.\n */\nexport default class UrlSearchParams {\n\t/**\n\t * Constructs a new UrlSearchParams from a query string, an object of parameters and values, or another\n\t * UrlSearchParams.\n\t */\n\tconstructor(input?: string | ParamList | UrlSearchParams) {\n\t\tlet list: ParamList;\n\n\t\tif (input instanceof UrlSearchParams) {\n\t\t\t// Copy the incoming UrlSearchParam's internal list\n\t\t\tlist = <ParamList> duplicate(input._list);\n\t\t}\n\t\telse if (typeof input === 'object') {\n\t\t\t// Copy the incoming object, assuming its property values are either arrays or strings\n\t\t\tlist = {};\n\t\t\tfor (const key in input) {\n\t\t\t\tconst value = (<ParamList> input)[key];\n\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tlist[key] = value.length ? value.slice() : [ '' ];\n\t\t\t\t}\n\t\t\t\telse if (value == null) {\n\t\t\t\t\tlist[key] = [ '' ];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlist[key] = [ <string> value ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (typeof input === 'string') {\n\t\t\t// Parse the incoming string as a query string\n\t\t\tlist = parseQueryString(input);\n\t\t}\n\t\telse {\n\t\t\tlist = {};\n\t\t}\n\n\t\tObject.defineProperty(this, '_list', { value: list });\n\t}\n\n\t/**\n\t * Maps property keys to arrays of values. The value for any property that has been set will be an array containing\n\t * at least one item. Properties that have been deleted will have a value of 'undefined'.\n\t */\n\tprotected _list: Hash<string[]>;\n\n\t/**\n\t * Appends a new value to the set of values for a key.\n\t * @param key The key to add a value for\n\t * @param value The value to add\n\t */\n\tappend(key: string, value: string): void {\n\t\tif (!this.has(key)) {\n\t\t\tthis.set(key, value);\n\t\t}\n\t\telse {\n\t\t\tthis._list[key].push(value);\n\t\t}\n\t}\n\n\t/**\n\t * Deletes all values for a key.\n\t * @param key The key whose values are to be removed\n\t */\n\tdelete(key: string): void {\n\t\t// Set to undefined rather than deleting the key, for better consistency across browsers.\n\t\t// If a deleted key is re-added, most browsers put it at the end of iteration order, but IE maintains\n\t\t// its original position.  This approach maintains the original position everywhere.\n\t\tthis._list[key] = undefined;\n\t}\n\n\t/**\n\t * Returns the first value associated with a key.\n\t * @param key The key to return the first value for\n\t * @return The first string value for the key\n\t */\n\tget(key: string): string {\n\t\tif (!this.has(key)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._list[key][0];\n\t}\n\n\t/**\n\t * Returns all the values associated with a key.\n\t * @param key The key to return all values for\n\t * @return An array of strings containing all values for the key\n\t */\n\tgetAll(key: string): string[] {\n\t\tif (!this.has(key)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._list[key];\n\t}\n\n\t/**\n\t * Returns true if a key has been set to any value, false otherwise.\n\t * @param key The key to test for existence\n\t * @return A boolean indicating if the key has been set\n\t */\n\thas(key: string): boolean {\n\t\treturn Array.isArray(this._list[key]);\n\t}\n\n\t/**\n\t * Returns an array of all keys which have been set.\n\t * @return An array of strings containing all keys set in the UrlSearchParams instance\n\t */\n\tkeys(): string[] {\n\t\tconst keys: string[] = [];\n\n\t\tfor (const key in this._list) {\n\t\t\tif (this.has(key)) {\n\t\t\t\tkeys.push(key);\n\t\t\t}\n\t\t}\n\n\t\treturn keys;\n\t}\n\n\t/**\n\t * Sets the value associated with a key.\n\t * @param key The key to set the value of\n\t */\n\tset(key: string, value: string): void {\n\t\tthis._list[key] = [ value ];\n\t}\n\n\t/**\n\t * Returns this object's data as an encoded query string.\n\t * @return A string in application/x-www-form-urlencoded format containing all of the set keys/values\n\t */\n\ttoString(): string {\n\t\tconst query: string[] = [];\n\n\t\tfor (const key in this._list) {\n\t\t\tif (!this.has(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst values = this._list[key];\n\t\t\tconst encodedKey = encodeURIComponent(key);\n\t\t\tfor (const value of values) {\n\t\t\t\tquery.push(encodedKey + (value ? ('=' + encodeURIComponent(value)) : ''));\n\t\t\t}\n\t\t}\n\n\t\treturn query.join('&');\n\t}\n}\n"]}